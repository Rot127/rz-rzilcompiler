{
  "qemu_defined" : [
    "J2_endloop01",
    "J2_endloop1",
    "J2_endloop0"
  ],
  "sub_routines": {
    "fcirc_add": {
      "return_type": "int32_t",
      "params": ["HexInsnPktBundle *bundle", "const HexOp *RxV", "int32_t offset", "int32_t M", "int32_t CS"],
      "code": "{ uint32_t K_const = extract32(M, 24, 4); uint32_t length = extract32(M, 0, 17); uint32_t new_ptr = RxV + offset; uint32_t start_addr; uint32_t end_addr; if (K_const == 0 && length >= 4) { start_addr = CS; end_addr = start_addr + length; } else { int32_t mask = (1 << (K_const + 2)) - 1; start_addr = RxV & (~mask); end_addr = start_addr | length; } if (new_ptr >= end_addr) { new_ptr -= length; } else if (new_ptr < start_addr) { new_ptr += length; } RxV = new_ptr; return new_ptr;}"
    },
    "trap": {
      "return_type": "void",
      "params": ["int32_t trap_type", "uint32_t imm"],
      "code": "{ __NOP; }"
    },
    "clz32": {
      "return_type": "uint32_t",
      "params": ["uint32_t t"],
      "code": "{ uint32_t clz32_x = t; if (clz32_x == 0) { return 32; } else { uint32_t clz32_n = 0; if (clz32_x <= 0x0000ffffu) { clz32_n += 16; clz32_x <<= 16; } if (clz32_x <= 0x00ffffffu) { clz32_n += 8; clz32_x <<= 8; } if (clz32_x <= 0x0fffffffu) { clz32_n += 4; clz32_x <<= 4; } if (clz32_x <= 0x3fffffffu) { clz32_n += 2; clz32_x <<= 2; } if (clz32_x <= 0x7fffffffu) { clz32_n++; } return clz32_n; } }"
    },
    "clz64": {
      "return_type": "uint64_t",
      "params": ["uint64_t t"],
      "code": "{ uint64_t clz64_x = t; if (clz64_x == 0) { return 64; } else { uint64_t clz64_n = 0; if (clz64_x <= 0x00000000ffffffffull) { clz64_n += 32; clz64_x <<= 32; } if (clz64_x <= 0x0000ffffffffffffull) { clz64_n += 16; clz64_x <<= 16; } if (clz64_x <= 0x00ffffffffffffffull) { clz64_n += 8; clz64_x <<= 8; } if (clz64_x <= 0x0fffffffffffffffull) { clz64_n += 4; clz64_x <<= 4; } if (clz64_x <= 0x3fffffffffffffffull) { clz64_n += 2; clz64_x <<= 2; } if (clz64_x <= 0x7fffffffffffffffull) { clz64_n++; } return clz64_n; } }"
    },
    "clo32": {
      "return_type": "uint32_t",
      "params": ["uint32_t x"],
      "code": "{ return clz32(~x); }"
    },
    "clo64": {
      "return_type": "uint64_t",
      "params": ["uint64_t x"],
      "code": "{ return clz64(~x); }"
    },
    "revbit16": {
      "return_type": "uint16_t",
      "params": ["uint16_t t"],
      "code": "{ uint16_t revbit16_x = bswap16(t); revbit16_x = ((uint16_t)((revbit16_x & 0xf0f0) >> 4)) | ((uint16_t)((revbit16_x & 0x0f0f) << 4)); revbit16_x = ((uint16_t)((revbit16_x & 0x8888) >> 3)) | ((uint16_t)((revbit16_x & 0x4444) >> 1)) | ((uint16_t)((revbit16_x & 0x2222) << 1)) | ((uint16_t)((revbit16_x & 0x1111) << 3)); return revbit16_x;}"
    },
    "revbit32": {
      "return_type": "uint32_t",
      "params": ["uint32_t t"],
      "code": "{ uint32_t revbit32_x = bswap32(t); revbit32_x = ((revbit32_x & 0xf0f0f0f0u) >> 4) | ((revbit32_x & 0x0f0f0f0fu) << 4); revbit32_x = ((revbit32_x & 0x88888888u) >> 3) | ((revbit32_x & 0x44444444u) >> 1) | ((revbit32_x & 0x22222222u) << 1) | ((revbit32_x & 0x11111111u) << 3); return revbit32_x; }"
    },
    "revbit64": {
      "return_type": "uint64_t",
      "params": ["uint64_t t"],
      "code": "{ uint64_t revbit64_x = bswap64(t); revbit64_x = ((revbit64_x & 0xf0f0f0f0f0f0f0f0ull) >> 4) | ((revbit64_x & 0x0f0f0f0f0f0f0f0full) << 4); revbit64_x = ((revbit64_x & 0x8888888888888888ull) >> 3) | ((revbit64_x & 0x4444444444444444ull) >> 1) | ((revbit64_x & 0x2222222222222222ull) << 1) | ((revbit64_x & 0x1111111111111111ull) << 3); return revbit64_x; }"
    },
    "fbrev": {
      "return_type": "uint32_t",
      "params": ["uint32_t addr"],
      "code": "{ return deposit32(addr, 0, 16, revbit16(addr)); }"
    },
    "conv_round": {
      "return_type": "int32_t",
      "params": ["int32_t a", "int n"],
      "code": "{ int64_t conv_val; if (n == 0) { conv_val = a; } else if ((a & ((1 << (n - 1)) - 1)) == 0) { conv_val = ((((int64_t)((int32_t)(a)))) + (int64_t)(((uint32_t)((1 << n) & a)) >> 1)); } else { conv_val = ((((int64_t)((int32_t)(a)))) + (1 << (n - 1))); } conv_val = conv_val >> n; return (int32_t)conv_val; }"
    },
    "set_usr_field": {
      "return_type": "void",
      "params": ["HexInsnPktBundle *bundle", "HexRegField field", "uint32_t val"],
      "code": "{ HEX_REG_ALIAS_USR = (REGFIELD(HEX_RF_WIDTH, field) ? deposit64(HEX_REG_ALIAS_USR, REGFIELD(HEX_RF_OFFSET, field), REGFIELD(HEX_RF_WIDTH, field), val) : HEX_REG_ALIAS_USR); }"
    },
    "get_usr_field": {
      "return_type": "uint32_t",
      "params": ["HexInsnPktBundle *bundle", "HexRegField field"],
      "code": "{ return ((REGFIELD(HEX_RF_WIDTH, field)) ? extract64((HEX_REG_ALIAS_USR), (REGFIELD(HEX_RF_OFFSET, field)), (REGFIELD(HEX_RF_WIDTH, field))) : 0LL); }"
    }
  }
}